package org.example.lec1_2;

// 문제 : 자동차 리모콘이 페라리 객체를 가리키게 한 후 해당 리모콘이 가리키고 있는 객체를 다시 페라리 리모콘으로 가리키게(참조하게) 하는 코드를 작성해주세요.

class Main {
    public static void main(String[] args) {
        // 수정가능지역 시작
        자동차 a자동차 = new 페라리();
        페라리 a페라리 = (페라리) a자동차;

        // 수정가능지역 끝
    }
}
class 자동차 {
    void 달리다() {}
    void 서다() {}
}
class 페라리 extends 자동차 {
    void 뚜껑이_열리다() {}
}

//class Main {
//    public static void main(String[] args) {
//        전사 a전사 = new 전사();
//
//        a전사.공격("브라이언", "칼");
//
//        a전사.재공격();
//
//        a전사.공격("필립", "창");
//
//        a전사.공격("마크", "지팡이");
//
//        a전사.재공격();
//
//        a전사.재공격();
//    }
//}
//
//class 전사{
//    String 공격자;
//    String 무기;
//    void 공격(String 공격자, String 무기){
//        this.공격자 = 공격자;
//        this.무기 = 무기;
//
//        재공격();
//    }
//    void 재공격(){
//        System.out.println(공격자 + "(이)가 " + 무기 +"(으)로 공격합니다.");
//    };
//}
//class Main {
//    public static void main(String[] args) {
//        무기 a무기 = new 칼();
//        a무기.공격();
//    }
//}
//
//class 무기{
//    void 공격(){
//        System.out.println("칼로 공격합니다");
//    }
//}
//class 칼 extends 무기{}

/* 가정
우리는 게임개발회사에 입사했다.
우리에게는 성격좋은 사수 한명이 있다.
내가 개발할 게임은 오리시뮬레이션 게임이다.
선임이 나의 개발을 도와주진 않지만 조언은 해준다.
*/

/* 요구사항
- D1 요구 : 오리를 생성하고 날게하시오.
- D1 완료 : 클래스와 메서드를 만들어서 처리
- D2 요구 : 게임의 디테일을 살리기 위해서 `청둥오리`와 `흰오리`를 생성하고 날게하시오.
- D2 완료 : 클래스와 메서드를 만들어서 처리
- D3 요구 : 오리 계열의 클래스에 날다 메서드가 중복되었습니다. 중복을 제거해주세요.
- D3 완료 : 상속을 사용해서 처리
- D4 요구 : 게임의 재미를 위하여 고무오리를 추가하고 날게 하시오.
- D4 완료 : 클래스와 메서드를 만들어서 처리
- D5 요구 : 주말 주주회의에서 고무오리가 하늘을 날아다니는 것에 대해서 태클이 들어왔습니다. 고무오리 계열은 하늘을 날 수 없게 해주세요.
- D5 완료 : 메서드 오버라이드를 사용해서 처리
- D6 요구 : 고무오리가 반응이 좋습니다. 고무2오리를 추가하고 날게 해주세요.
- D6 완료 : 고무오리가 반응이 좋습니다. 고무2오리를 추가하고 날게 해주세요.
- D7 요구 : 고무오리계열에서 날다 메서드의 중복을 제거해주세요.
- D7 완료 : 상속으로 해결
- D8 요구 : 자바에서 다중상속은 불가능 합니다. 상속에는 한계가 있습니다. 상속을 사용하지 않고 고무오리계열의 중복을 제거해주세요.
*/

//class Main {
//    public static void main(String[] args) {
//        청둥오리 a청둥오리 = new 청둥오리();
//        a청둥오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        흰오리 a흰오리 = new 흰오리();
//        a흰오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        고무오리 a고무오리 = new 고무오리();
//        a고무오리.날다();
//        // 출력 : 저는 날 수 없어요. ㅜㅠ
//
//        고무2오리 a고무2오리 = new 고무2오리();
//        a고무2오리.날다();
//        // 출력 : 저는 날 수 없어요. ㅜㅠ
//    }
//}
//
//class 오리 {
//    void 날다() {
//        System.out.println("오리가 날개로 날아갑니다.");
//    }
//}
//
//// 오리 => 부모 클래스
//// 흰오리 => 자식 클래스
//// 흰오리 extends 오리 => 흰오리가 오리의 능력을 물려 받는다.
//// "`흰오리`는 `오리`이다." 라고 자바에게 알려준다.
//// `A 는 B 이다.` 테스트에 통과하는 것만 상속이 가능하다.
//// 클래스와 객체는 명사이다.
//// 메서드는 동사이다.
//class 흰오리 extends 오리 {
//
//}
//
//class 청둥오리 extends 오리 {
//
//}
//
//class 고무오리 extends 오리 {
//    // 메서드 재정의 라고 합니다.
//    // 메서드 오버라이드 라고도 합니다.
//    // 메서드 재정의 => 부모가 물려준 능력을 다시 구현한다.
//    void 날다() {
//        System.out.println("저는 날 수 없어요. ㅜㅠ");
//    }
//}
//
//class 고무2오리 extends 고무오리 {
//    void 날다() {
//        System.out.println("저는 날 수 없어요. ㅜㅠ");
//    }
//}

//public class Main {
//    public static void main(String[] args){
//        Car myCar1 = new Car();
//        Car myCar2 = new Car();
//        Car myCar3 = new Car();
//
//        myCar1.maxSpeed = 230;
//        myCar2.maxSpeed = 210;
//
//        myCar1.num = 1;
//        myCar2.num = 2;
//
//        myCar1.drive();
//        myCar2.drive();
//        //myCar3.drive();
//    }
//}
//class Car{
//    int maxSpeed;
//    int num;
//    void drive(){
//        System.out.println(num+"번 자동차가 최고속력 " +maxSpeed+ "km로 달린다");
//    }
//}